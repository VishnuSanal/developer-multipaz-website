"use strict";(self.webpackChunkowf_website=self.webpackChunkowf_website||[]).push([[701],{5301:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"DEVELOPER-ENVIRONMENT","title":"Developer Environment","description":"We use Android Studio for development which can be downloaded from","source":"@site/contributing/3-DEVELOPER-ENVIRONMENT.md","sourceDirName":".","slug":"/DEVELOPER-ENVIRONMENT","permalink":"/contributing/DEVELOPER-ENVIRONMENT","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Coding Style","permalink":"/contributing/CODING-STYLE"},"next":{"title":"Testing","permalink":"/contributing/TESTING"}}');var i=o(4848),s=o(8453);const r={},d="Developer Environment",l={},a=[{value:"Xcode",id:"xcode",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"developer-environment",children:"Developer Environment"})}),"\n",(0,i.jsxs)(n.p,{children:["We use Android Studio for development which can be downloaded from\n",(0,i.jsx)(n.a,{href:"https://developer.android.com/studio",children:"https://developer.android.com/studio"}),"."]}),"\n",(0,i.jsx)(n.h1,{id:"mac-os",children:"Mac OS"}),"\n",(0,i.jsxs)(n.p,{children:["The preferred developer environment is Mac OS since this also allows building the iOS variant\nof our Kotlin Multiplatform codebase. You will need a recent version of Xcode installed along\nwith Xcode command-line tools. See ",(0,i.jsx)(n.a,{href:"https://developer.apple.com/xcode/resources/",children:"https://developer.apple.com/xcode/resources/"})," for more\ninformation."]}),"\n",(0,i.jsx)(n.h2,{id:"xcode",children:"Xcode"}),"\n",(0,i.jsx)(n.p,{children:"Xcode is used mainly just to launch and debug Testapp, all development usually happens\nin Android Studio. If you're just making a library change in common code it's likely\nenough to just rely on unit tests or the Android version of TestApp for testing. In other\nwords there is rarely a need to use Xcode at all."}),"\n",(0,i.jsxs)(n.p,{children:["To build Testapp in Xcode you will need to create the ",(0,i.jsx)(n.code,{children:"samples/testapp/iosApp/DeveloperConfig.xcconfig"}),"\nfile with the Team ID assigned to you by Apple. The project includes a template which can\nbe used for this in the ",(0,i.jsx)(n.code,{children:"samples/testapp/iosApp/DeveloperConfig.xcconfig.template"})," file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cp samples/testapp/iosApp/DeveloperConfig.xcconfig.template samples/testapp/iosApp/DeveloperConfig.xcconfig && \\\n$EDITOR samples/testapp/iosApp/DeveloperConfig.xcconfig\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You also need to install ",(0,i.jsx)(n.a,{href:"https://cocoapods.org/",children:"CocoaPods"})," and set up your environment so\nit's functional (e.g. the ",(0,i.jsx)(n.code,{children:"pod"})," program is in PATH). Then you need to run"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"pod install\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Once this is done, you can open ",(0,i.jsx)(n.code,{children:"TestApp.xcworkspace"})," in Xcode, select TestApp and a target\n(e.g. an iPhone), and run the app."]}),"\n",(0,i.jsx)(n.h1,{id:"linux-and-windows",children:"Linux and Windows"}),"\n",(0,i.jsx)(n.p,{children:"We also support building on Linux and Windows. In this setup, iOS libraries are not built\nbut non-iOS artifacts for other platforms will work fine."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>d});var t=o(6540);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);